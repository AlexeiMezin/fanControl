// три канала: ОЖ, Кондиционер, АКПП
#define nChnl 3
// количество параметров: t1, t2, t3, g, s
// температура срабатывание 1, 2 и 3 скорости
// гистерезис срабатывания
// температура включения сигнализации
#define nParam 5 
// нога для кнопки
#define offButtonPin PD3
// нога для пищалки
#define zummerPin PD2

// Data wire is plugged into port 11 on the Arduino
#define ONE_WIRE_BUS 11
#define TEMPERATURE_PRECISION 9

struct menuItem
{
	byte id; 			// ID состояния
	byte pos; 			// позиция в меню, для установки курсора при выходе из подменю
	byte captN; 		// заголовок подменю
	byte txtN;			// текст пункта меню
	byte param;			// номер параметра 0-14 для температур, 20-30 для режимов работы, 255 -- нет параметра
	byte up;			// дествие при крутилке вверх
	byte down;			// дествие при крутилке вниз
	byte b1, b2, b3;	// дествие при нажатии/долгом нажатии/очень долгом нажатии (ввод, вверх, в самый верх)
	void (*func)(byte); // функция установки параметров
};



/* GLOBAL VARS */ 

// главное состояние вентиляторов
// 255 - ОТКЛЮЧЕНЫ!
// 0-3 - Режим Авто, 0 - выключены, 1-3 -- скорости
// 22 - Режим ручной, принудительно 1 скорость
// 23 - принудительно 2 скорость
// 24 - принудительно 3 скорость
byte fanState = 0;
// при "красной кнопке" сохранить тот режим, который был до этого, т.е. ручной/авто
// и вернуть его при отключении "красной кнопки"
byte prevFanState = 0;
// последняя причина (канал) включения вентилятора
byte lastReason = 0;

// ширина шрифта
byte FW;
// ID текущего состояния экрана
byte ID = 1;
// предыдущиее состояние. Для уменьшения перерисовки.
byte prevID = 10;
bool fullRedraw = false;

float ch1_temp, ch2_temp, ch3_temp;

// скорости. которые хочет включить каждый из каналов
byte ch1_w = 0, ch2_w = 0, ch3_w = 0;

char s[6]; // буффер для форматирования строки

// статус нажатых кнопок
int up = 0, down = 0; 
bool b1, b2, b3;//, offButton;

// позиция курсора в меню
byte menuCurPos = 1;
// "окно" меню, начальная позиция
byte WP = 1;

// массив для хранения настроек температуры
byte tempSettings[nChnl * nParam];

// позиция курсора на экране меню
// нужно чтобы знать, где рисовать параметр при его изменении
byte cursorScrPos;

// включить/выключить пищалку
bool zummer = false;
